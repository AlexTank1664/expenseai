import Foundation
import CoreData

// –ü—Ä–æ—Ç–æ–∫–æ–ª –¥–ª—è —Å—É—â–Ω–æ—Å—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å.
// –¢—Ä–µ–±—É–µ—Ç —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–≤–æ–π—Å—Ç–≤–∞ `endpoint` –¥–ª—è —É–∫–∞–∑–∞–Ω–∏—è –ø—É—Ç–∏ –≤ API.
protocol Syncable: NSManagedObject, DTOConvertible where DTO: Codable {
    static var endpoint: String { get }
}

// –†–∞—Å—à–∏—Ä—è–µ–º –Ω–∞—à–∏ –º–æ–¥–µ–ª–∏, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞–ª–∏ `Syncable`.
extension Participant: Syncable { static var endpoint: String = APIConstants.Endpoints.participants }
extension Group: Syncable { static var endpoint: String = APIConstants.Endpoints.groups }
extension Expense: Syncable { static var endpoint: String = APIConstants.Endpoints.expenses }
// Currency is not syncable in the same way (push/pull), it's pull-only.
// We handle it as a special case in the sync coordinator.

@MainActor
final class SyncEngine: ObservableObject {
    
    // MARK: - Published Properties for UI
    @Published var isSyncing: Bool = false
    @Published var syncProgressMessage: String = ""

    // MARK: - Private Properties
    private let context: NSManagedObjectContext
    private let apiService: APIService
    private let authService: AuthService
    
    // –ö–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤ UserDefaults
    private let lastSyncTimestampKey = "lastSyncTimestamp"
    private var lastSyncTimestamp: Date? {
        get { UserDefaults.standard.object(forKey: lastSyncTimestampKey) as? Date }
        set { UserDefaults.standard.set(newValue, forKey: lastSyncTimestampKey) }
    }

    // MARK: - Initializer
    init(context: NSManagedObjectContext, apiService: APIService = .shared, authService: AuthService) {
        self.context = context
        self.apiService = apiService
        self.authService = authService
    }
    
    // MARK: - Main Sync Coordinator
    
    func sync() async throws {
        guard !isSyncing else {
            print("Sync is already in progress.")
            return
        }
        guard let token = authService.authToken else {
            print("Sync aborted: User is not authenticated.")
            throw SyncError.notAuthenticated
        }
        
        isSyncing = true
        defer {
            isSyncing = false
            syncProgressMessage = ""
        }
        
        print("üöÄ --- Starting Full Sync --- üöÄ")
        
        // --- –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø—Ä–∞–≤–æ—á–Ω–∏–∫–æ–≤ (—Ç–æ–ª—å–∫–æ PULL) ---
        syncProgressMessage = "Updating currencies..."
        try await pullAndApply(Currency.self, authToken: token)

        // --- –®–∞–≥ 2: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (PUSH, –∑–∞—Ç–µ–º PULL) ---
        // –ü–æ—Ä—è–¥–æ–∫ –≤–∞–∂–µ–Ω –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π:
        // –£—á–∞—Å—Ç–Ω–∏–∫–∏ -> –ì—Ä—É–ø–ø—ã -> –ó–∞—Ç—Ä–∞—Ç—ã
        
        syncProgressMessage = "Updating participants..."
        try await syncEntity(Participant.self, authToken: token)
        
        syncProgressMessage = "Updating groups..."
        try await syncEntity(Group.self, authToken: token)
        
        syncProgressMessage = "Updating expenses..."
        try await syncEntity(Expense.self, authToken: token)

        // --- –®–∞–≥ 3: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É—Å–ø–µ—à–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ ---
        // –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º `Date()` –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è,
        // –∞ –Ω–µ –≤—Ä–µ–º—è, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–∏—à–ª–æ —Å —Å–µ—Ä–≤–µ—Ä–∞. –≠—Ç–æ –∫–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –ø–æ–¥—Ö–æ–¥.
        self.lastSyncTimestamp = Date()
        
        print("‚úÖ --- Full Sync Finished Successfully --- ‚úÖ")
    }

    // MARK: - Generic Sync Logic
    
    /// –ö–æ–æ—Ä–¥–∏–Ω–∏—Ä—É–µ—Ç PUSH –∏ PULL –¥–ª—è –æ–¥–Ω–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Å—É—â–Ω–æ—Å—Ç–∏.
    private func syncEntity<T: Syncable>(_ entityType: T.Type, authToken: String) async throws where T.DTO.ID == UUID {
        // PUSH: –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        let localChanges = try await fetchPendingObjects(entity: entityType)
        if !localChanges.isEmpty {
            print("‚òÅÔ∏è Pushing \(localChanges.count) \(entityType.entity().name ?? "objects")...")
            let serverAcknowledgedDTOs = try await apiService.post(items: localChanges, endpoint: T.endpoint, authToken: authToken)
            
            // --- MERGE LOGIC ---
            // If we are syncing participants, check for any merged records.
            if let participantDTOs = serverAcknowledgedDTOs as? [Participant.DTO] {
                try await handleParticipantMerges(from: participantDTOs)
            }
            // --- END OF MERGE LOGIC ---
            
            // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ `needsSync` —Ç–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤,
            // –∫–æ—Ç–æ—Ä—ã–µ —Å–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª –∏ –≤–µ—Ä–Ω—É–ª.
            let idsToMarkAsSynced = serverAcknowledgedDTOs.map { $0.id }
            try await batchUpdateNeedsSyncFlag(for: idsToMarkAsSynced, entityName: T.entity().name!)
        } else {
            print("üëç No local changes to push for \(entityType.entity().name ?? "entity").")
        }
        
        // PULL: –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ–º –∏—Ö
        try await pullAndApply(entityType, authToken: authToken)
    }

    /// –ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å —Å–µ—Ä–≤–µ—Ä–∞ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç –∏—Ö –∫ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ.
    private func pullAndApply<T: NSManagedObject & DTOConvertible>(_ entityType: T.Type, authToken: String) async throws where T.DTO: Decodable {
        let endpoint = (entityType as? (any Syncable.Type))?.endpoint ?? APIConstants.Endpoints.currencies
        print("‚òÅÔ∏è Pulling remote changes for \(entityType.entity().name ?? "objects")...")
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º DTO —Å —Å–µ—Ä–≤–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è `lastSyncTimestamp`
        let remoteDTOs: [T.DTO] = try await apiService.fetch(endpoint: endpoint, authToken: authToken, lastSyncTimestamp: self.lastSyncTimestamp)
        
        if remoteDTOs.isEmpty {
            print("üëç No remote changes to pull for \(entityType.entity().name ?? "entity").")
            return
        }
        
        print("Applying \(remoteDTOs.count) remote changes for \(entityType.entity().name ?? "entity")...")
        
        // –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Core Data
        try await applyChanges(for: remoteDTOs, entityType: entityType, in: context)
    }

    // MARK: - Core Data Helpers
    
    /// Handles the special case where the server merges a participant record via email.
    /// It finds the local record by `clientId` and updates its `id` to the server's `id`.
    private func handleParticipantMerges(from dtos: [Participant.DTO]) async throws {
        // Filter out only the DTOs that represent a merge.
        let mergeDTOs = dtos.filter { $0.clientId != nil }
        
        guard !mergeDTOs.isEmpty else { return } // Nothing to merge
        
        print("üîÑ Handling \(mergeDTOs.count) participant merges...")
        
        try await context.perform {
            for dto in mergeDTOs {
                guard let clientId = dto.clientId else { continue }
                
                // Find the local participant that has the old (client) ID.
                let fetchRequest = Participant.fetchRequest()
                fetchRequest.predicate = NSPredicate(format: "id == %@", clientId as CVarArg)
                fetchRequest.fetchLimit = 1
                
                // If we find the participant, update its ID to the new canonical ID from the server.
                if let participantToUpdate = try self.context.fetch(fetchRequest).first {
                    print("Merging participant: \(participantToUpdate.name ?? "") | Old ID: \(clientId) -> New ID: \(dto.id)")
                    participantToUpdate.id = dto.id
                    // We don't need to set needsSync, as this is just an ID correction.
                }
            }
            
            // Save the context to persist the ID changes.
            if self.context.hasChanges {
                try self.context.save()
            }
        }
    }
    
    /// –°–æ–±–∏—Ä–∞–µ—Ç –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å —Ñ–ª–∞–≥–æ–º `needsSync = true`.
    private func fetchPendingObjects<T: Syncable>(entity: T.Type) async throws -> [T.DTO] {
        try await context.perform {
            let fetchRequest = NSFetchRequest<T>(entityName: T.entity().name!)
            fetchRequest.predicate = NSPredicate(format: "needsSync == YES")
            
            let results = try self.context.fetch(fetchRequest)
            return results.compactMap { $0.toDTO() }
        }
    }
    
    /// –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Ñ–ª–∞–≥ `needsSync` –¥–ª—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
    private func batchUpdateNeedsSyncFlag(for ids: [UUID], entityName: String) async throws {
        guard !ids.isEmpty else { return }
        try await context.perform {
            let batchUpdateRequest = NSBatchUpdateRequest(entityName: entityName)
            batchUpdateRequest.predicate = NSPredicate(format: "id IN %@", ids)
            batchUpdateRequest.propertiesToUpdate = ["needsSync": false]
            try self.context.execute(batchUpdateRequest)
            print("Reset needsSync flag for \(ids.count) objects in \(entityName).")
        }
    }
    
    // MARK: - Reconciliation (Applying Server Changes)
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∞—à–∞ –ª–æ–≥–∏–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π (applyChanges),
    // –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∂–µ–Ω–µ—Ä–∏–∫–∞–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ,
    // –∏–ª–∏ –≤—ã–∑—ã–≤–∞—é—â–∞—è —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã (applyParticipantChanges –∏ —Ç.–¥.).
    // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, —è –ø–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—é –≤—ã–∑–æ–≤—ã –≤–∞—à–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –º–µ—Ç–æ–¥–æ–≤.
    
    private func applyChanges(for dtos: [any Codable], entityType: NSManagedObject.Type, in context: NSManagedObjectContext) async throws {
        try await context.perform {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø DTO –∏ –≤—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –º–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            if let participantDTOs = dtos as? [Participant.DTO] {
                try self.applyParticipantChanges(participantDTOs)
            } else if let groupDTOs = dtos as? [Group.DTO] {
                try self.applyGroupChanges(groupDTOs)
            } else if let expenseDTOs = dtos as? [Expense.DTO] {
                try self.applyExpenseChanges(expenseDTOs)
            } else if let currencyDTOs = dtos as? [Currency.DTO] {
                try self.applyCurrencyChanges(currencyDTOs)
            }
            
            if context.hasChanges {
                try context.save()
            }
        }
    }

    // MARK: - Entity-Specific Reconciliation Logic
    // (–í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –º–µ—Ç–æ–¥—ã apply... –ø–æ—á—Ç–∏ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å)

    private func applyParticipantChanges(_ dtos: [Participant.DTO]) throws {
        let dtoIDs = dtos.map { $0.id }
        let fetchRequest = Participant.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id IN %@", dtoIDs)
        let existingParticipants = try context.fetch(fetchRequest)
        let existingParticipantsDict = Dictionary(uniqueKeysWithValues: existingParticipants.map { ($0.id!, $0) })

        for dto in dtos {
            let participant = existingParticipantsDict[dto.id] ?? Participant(context: context)
            if dto.isSoftDeleted {
                context.delete(participant)
                continue
            }
            if let localDate = participant.updatedAt, localDate >= dto.updatedAt {
                continue
            }
            participant.update(from: dto, in: context)
        }
    }

    private func applyGroupChanges(_ dtos: [Group.DTO]) throws {
        let dtoIDs = dtos.map { $0.id }
        let fetchRequest = Group.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id IN %@", dtoIDs)
        let existingGroups = try context.fetch(fetchRequest)
        let existingGroupsDict = Dictionary(uniqueKeysWithValues: existingGroups.map { ($0.id!, $0) })

        // --- OPTIMIZATION: Pre-fetch all related objects needed for the updates ---
        let currencyCodes = Set(dtos.map { $0.defaultCurrencyCode })
        let allMemberIDs = Set(dtos.flatMap { $0.memberIDs })
        
        let currenciesByCode = try fetchCurrencies(with: currencyCodes, in: context)
        let membersByID = try fetchParticipants(with: Array(allMemberIDs), in: context)
        // --- END OF OPTIMIZATION ---

        for dto in dtos {
            let group = existingGroupsDict[dto.id] ?? Group(context: context)
            if dto.isSoftDeleted {
                context.delete(group)
                continue
            }
            if let localDate = group.updatedAt, localDate >= dto.updatedAt {
                continue
            }
            // Pass the pre-fetched dictionaries to the update method
            try group.update(from: dto, currencies: currenciesByCode, members: membersByID)
        }
    }

    private func applyExpenseChanges(_ dtos: [Expense.DTO]) throws {
        let dtoIDs = dtos.map { $0.id }
        let fetchRequest = Expense.fetchRequest()
        fetchRequest.predicate = NSPredicate(format: "id IN %@", dtoIDs)
        let existingExpenses = try context.fetch(fetchRequest)
        let existingExpensesDict = Dictionary(uniqueKeysWithValues: existingExpenses.map { ($0.id!, $0) })

        for dto in dtos {
            let expense = existingExpensesDict[dto.id] ?? Expense(context: context)
            if dto.isSoftDeleted {
                context.delete(expense)
                continue
            }
            if let localDate = expense.updatedAt, localDate >= dto.updatedAt {
                continue
            }
            try expense.update(from: dto, in: context)
        }
    }

    private func applyCurrencyChanges(_ dtos: [Currency.DTO]) throws {
        // More efficient version:
        // 1. Fetch all existing currencies in one go.
        // 2. Create a dictionary for quick lookups.
        // 3. Iterate through DTOs and update or create managed objects.
        let existingCurrencies = try context.fetch(Currency.fetchRequest())
        let existingCurrenciesDict = Dictionary(uniqueKeysWithValues: existingCurrencies.compactMap { currency -> (String, Currency)? in
            guard let code = currency.c_code else { return nil }
            return (code, currency)
        })

        for dto in dtos {
            // Find an existing currency or create a new one.
            let currency = existingCurrenciesDict[dto.c_code] ?? Currency(context: context)
            currency.update(from: dto)
        }
    }
}

// MARK: - Helper Extensions for Reconciliation
// –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã `update(from:)` –∫ –º–æ–¥–µ–ª—è–º, —á—Ç–æ–±—ã –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.

protocol Reconcilable {
    associatedtype DTO
    // The `in context` parameter is no longer needed if we pass dependencies directly.
    func update(from dto: DTO) throws
}

extension Participant: Reconcilable {
    // This one is simple and has no external dependencies, so we can keep the old signature for now.
    func update(from dto: Participant.DTO, in context: NSManagedObjectContext) {
        self.id = dto.id
        self.name = dto.name
        self.email = dto.email
        self.phone = dto.phone
        self.updatedAt = dto.updatedAt
        self.isSoftDeleted = false
        self.needsSync = false
    }
    
    // We add a dummy conformance to the new protocol requirement.
    func update(from dto: DTO) throws {
        // This is a bit of a workaround to satisfy the protocol.
        // The better long-term solution would be to refactor all `update` methods.
        guard let context = self.managedObjectContext else { return }
        self.update(from: dto, in: context)
    }
}

extension Group { // Remove Reconcilable from here for now to avoid protocol conflicts
    // Create a new, more efficient update method that accepts dependencies.
    func update(from dto: Group.DTO, currencies: [String: Currency], members: [UUID: Participant]) throws {
        self.id = dto.id
        self.name = dto.name
        self.updatedAt = dto.updatedAt
        self.isSoftDeleted = false
        self.needsSync = false
        
        // –°–≤—è–∑–∏
        // Use the pre-fetched dictionaries instead of fetching from the context.
        self.defaultCurrency = currencies[dto.defaultCurrencyCode]
        
        let groupMembers = dto.memberIDs.compactMap { members[$0] }
        self.members = NSSet(array: groupMembers)
    }
}

extension Expense: Reconcilable {
    func update(from dto: Expense.DTO, in context: NSManagedObjectContext) throws {
        self.id = dto.id
        self.desc = dto.desc
        self.amount = dto.amount
        self.is_settlement = dto.is_settlement
        self.createdAt = dto.createdAt
        self.updatedAt = dto.updatedAt
        self.isSoftDeleted = false
        self.needsSync = false

        // –°–≤—è–∑–∏
        self.group = try fetchGroup(with: dto.groupID, in: context)
        self.currency = try fetchCurrency(with: dto.currencyCode, in: context)
        self.paidBy = try fetchParticipant(with: dto.paidByID, in: context)
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ª–µ–π (shares)
        self.shares?.forEach { context.delete($0 as! NSManagedObject) }
        var newShares = Set<ExpenseShare>()
        for shareDTO in dto.shares {
            let newShare = ExpenseShare(context: context)
            newShare.id = shareDTO.id
            newShare.amount = shareDTO.amount
            newShare.participant = try fetchParticipant(with: shareDTO.participantID, in: context)
            newShares.insert(newShare)
        }
        self.shares = NSSet(set: newShares)
    }
    
    func update(from dto: DTO) throws {
        guard let context = self.managedObjectContext else { return }
        try self.update(from: dto, in: context)
    }
}

extension Currency {
    // –£ Currency –Ω–µ—Ç —Å–ª–æ–∂–Ω—ã—Ö —Å–≤—è–∑–µ–π, –ø–æ—ç—Ç–æ–º—É `update` –ø—Ä–æ—Å—Ç–æ–π
    func update(from dto: Currency.DTO) {
        self.c_code = dto.c_code
        self.currency_name = dto.currency_name
        self.i_code = dto.i_code
        self.currency_name_plural = dto.currency_name_plural
        self.decimal_digits = dto.decimal_digits
        self.rounding = dto.rounding
        self.symbol = dto.symbol
        self.symbol_native = dto.symbol_native
        // `is_active` —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–æ, –Ω–µ —Ç—Ä–æ–≥–∞–µ–º
    }
}


// MARK: - Global Fetch Helpers for Reconciliation

// –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–¥–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.

func fetchCurrency(with code: String, in context: NSManagedObjectContext) throws -> Currency? {
    let request = Currency.fetchRequest()
    request.predicate = NSPredicate(format: "c_code == %@", code)
    request.fetchLimit = 1
    return try context.fetch(request).first
}

// Helper function to fetch a dictionary of currencies by their codes
func fetchCurrencies(with codes: Set<String>, in context: NSManagedObjectContext) throws -> [String: Currency] {
    guard !codes.isEmpty else { return [:] }
    let request = Currency.fetchRequest()
    request.predicate = NSPredicate(format: "c_code IN %@", codes)
    let results = try context.fetch(request)
    return Dictionary(uniqueKeysWithValues: results.compactMap {
        guard let code = $0.c_code else { return nil }
        return (code, $0)
    })
}

func fetchParticipant(with id: UUID, in context: NSManagedObjectContext) throws -> Participant? {
    let request = Participant.fetchRequest()
    request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
    request.fetchLimit = 1
    return try context.fetch(request).first
}

func fetchParticipants(with ids: [UUID], in context: NSManagedObjectContext) throws -> [UUID: Participant] {
    guard !ids.isEmpty else { return [:] }
    let request = Participant.fetchRequest()
    request.predicate = NSPredicate(format: "id IN %@", ids)
    let results = try context.fetch(request)
    return Dictionary(uniqueKeysWithValues: results.map { ($0.id!, $0) })
}

func fetchGroup(with id: UUID, in context: NSManagedObjectContext) throws -> Group? {
    let request = Group.fetchRequest()
    request.predicate = NSPredicate(format: "id == %@", id as CVarArg)
    request.fetchLimit = 1
    return try context.fetch(request).first
}
