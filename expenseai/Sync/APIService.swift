import Foundation

/// `APIService` –∏–Ω–∫–∞–ø—Å—É–ª–∏—Ä—É–µ—Ç –≤—Å—é —Ä–∞–±–æ—Ç—É —Å —Å–µ—Ç—å—é.
/// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç Swift Concurrency (async/await) –∏ –¥–∂–µ–Ω–µ—Ä–∏–∫–∏ –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º–æ—Å—Ç–∏.
final class APIService {
    
    // –°–∏–Ω–≥–ª—Ç–æ–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    static let shared = APIService()
    
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç–µ—Ä, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —Å –¥–æ–ª—è–º–∏ —Å–µ–∫—É–Ω–¥.
    // –î–µ–ª–∞–µ–º –µ–≥–æ static, —á—Ç–æ–±—ã –æ–Ω —Å–æ–∑–¥–∞–≤–∞–ª—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑.
    private static let iso8601Formatter: ISO8601DateFormatter = {
        let formatter = ISO8601DateFormatter()
        formatter.formatOptions = [.withInternetDateTime, .withFractionalSeconds]
        return formatter
    }()
    
    private let baseURL: URL
    private let session: URLSession
    private let jsonDecoder: JSONDecoder
    private let jsonEncoder: JSONEncoder
    
    // –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
    private init() {
        guard let url = URL(string: APIConstants.baseURL) else {
            fatalError("Base URL is invalid")
        }
        self.baseURL = url
        
        self.session = URLSession(configuration: .default)
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –¥–µ–∫–æ–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
        self.jsonDecoder = JSONDecoder()
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Å –Ω–∞—à–∏–º —Ñ–æ—Ä–º–∞—Ç–µ—Ä–æ–º
        jsonDecoder.dateDecodingStrategy = .custom { decoder in
            let container = try decoder.singleValueContainer()
            let dateString = try container.decode(String.self)
            
            if let date = Self.iso8601Formatter.date(from: dateString) {
                return date
            }
            
            throw DecodingError.dataCorruptedError(in: container, debugDescription: "Cannot decode date string \(dateString)")
        }
        
        // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –µ–Ω–∫–æ–¥–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 8601
        self.jsonEncoder = JSONEncoder()
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã –¥–∞—Ç—ã –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏—Å—å –≤ –æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        jsonEncoder.dateEncodingStrategy = .custom { date, encoder in
            var container = encoder.singleValueContainer()
            let dateString = Self.iso8601Formatter.string(from: date)
            try container.encode(dateString)
        }
    }
    
    // MARK: - Generic REST Methods
    
    /// **PULL**: –ó–∞–≥—Ä—É–∂–∞–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Å —Å–µ—Ä–≤–µ—Ä–∞ (GET-–∑–∞–ø—Ä–æ—Å).
    /// - Parameters:
    ///   - endpoint: –ü—É—Ç—å –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, `APIConstants.Endpoints.groups`).
    ///   - authToken: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    ///   - lastSyncTimestamp: –î–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
    /// - Returns: –ú–∞—Å—Å–∏–≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤.
    func fetch<T: Decodable>(endpoint: String, authToken: String, lastSyncTimestamp: Date?) async throws -> [T] {
        var url = baseURL.appendingPathComponent(endpoint)
        
        // –ï—Å–ª–∏ –µ—Å—Ç—å timestamp, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –∫–∞–∫ query-–ø–∞—Ä–∞–º–µ—Ç—Ä
        if let timestamp = lastSyncTimestamp {
            var components = URLComponents(url: url, resolvingAgainstBaseURL: false)!
            components.queryItems = [URLQueryItem(name: "since", value: timestamp.ISO8601Format())]
            url = components.url!
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "GET"
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        request.setValue("Token \(authToken)", forHTTPHeaderField: "Authorization")
        
        return try await performRequest(request)
    }
    
    /// **PUSH (Bulk)**: –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä (POST-–∑–∞–ø—Ä–æ—Å).
    /// - Parameters:
    ///   - items: –ú–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª—É `Encodable`.
    ///   - endpoint: –ü—É—Ç—å –∫ API —ç–Ω–¥–ø–æ–∏–Ω—Ç—É.
    ///   - authToken: –¢–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    /// - Returns: –ú–∞—Å—Å–∏–≤ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–µ–Ω–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–æ–º.
    func post<T: Codable>(items: [T], endpoint: String, authToken: String) async throws -> [T] {
        let url = baseURL.appendingPathComponent(endpoint)
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.setValue("Token \(authToken)", forHTTPHeaderField: "Authorization")
        
        // –ö–æ–¥–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        request.httpBody = try jsonEncoder.encode(items)
        
        // –î–ª—è –æ—Ç–ª–∞–¥–∫–∏
        if let body = request.httpBody, let bodyString = String(data: body, encoding: .utf8) {
            print("‚¨ÜÔ∏è PUSH to \(endpoint): \(bodyString)")
        }
        
        return try await performRequest(request)
    }
    
    // MARK: - Private Request Handler
    
    /// –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —Å–µ—Ç–µ–≤–æ–π –∑–∞–ø—Ä–æ—Å –∏ –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–≤–µ—Ç–∞.
    private func performRequest<T: Decodable>(_ request: URLRequest) async throws -> T {
        print("üåç Requesting URL: \(request.url?.absoluteString ?? "N/A")")
        
        let (data, response) = try await session.data(for: request)
        
        guard let httpResponse = response as? HTTPURLResponse else {
            throw SyncError.networkError(statusCode: -1, data: data)
        }
        
        // –õ–æ–≥–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å-–∫–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print("‚¨áÔ∏è Response from \(request.url?.path() ?? ""): Status \(httpResponse.statusCode)")
        
        // –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
        if (200...299).contains(httpResponse.statusCode) {
            do {
                let decodedResponse = try jsonDecoder.decode(T.self, from: data)
                return decodedResponse
            } catch {
                print("‚ùå Decoding Error: \(error)")
                throw SyncError.decodingError(error)
            }
        } else { // –û—à–∏–±–∫–∞
            // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞ –ø—Ä–∏ –æ—à–∏–±–∫–µ
            if let errorBody = String(data: data, encoding: .utf8) {
                print("‚ùå Error Body: \(errorBody)")
            }
            throw SyncError.networkError(statusCode: httpResponse.statusCode, data: data)
        }
    }
}